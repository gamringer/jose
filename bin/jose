#!/usr/bin/env php
<?php

declare(strict_types=1);

require __DIR__.'/../vendor/autoload.php';

use Jose\Component\Console;
use Symfony\Component\Console\Application;
use Jose\Component\Core\Converter\StandardJsonConverter;
use Jose\Component\KeyManagement\KeyAnalyzer;
use Jose\Component\KeyManagement\X5UFactory;
use Jose\Component\KeyManagement\JKUFactory;
use Jose\Component\KeyManagement\KeyAnalyzer\JWKAnalyzerManager;
use Http\Adapter\Guzzle6\Client;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Psr7\Response;
use Http\Message\MessageFactory as Psr7MessageFactory;

/**
 * Class MessageFactory.
 */
final class MessageFactory implements Psr7MessageFactory
{
    /**
     * {@inheritdoc}
     */
    public function createRequest($method, $uri, array $headers = [], $body = null, $protocolVersion = '1.1')
    {
        return new Request($method, $uri, $headers, $body, $protocolVersion);
    }

    /**
     * {@inheritdoc}
     */
    public function createResponse($statusCode = 200, $reasonPhrase = null, array $headers = [], $body = null, $protocolVersion = '1.1')
    {
        return new Response($statusCode, $headers, $body, $protocolVersion, $reasonPhrase);
    }
}

$jsonConverter = new StandardJsonConverter();
$httpClient = new Client();
$messageFactory = new MessageFactory();
$jwkAnalyzerManager = new JWKAnalyzerManager();
$jwkAnalyzerManager
    ->add(new KeyAnalyzer\AlgorithmAnalyzer())
    ->add(new KeyAnalyzer\UsageAnalyzer())
    ->add(new KeyAnalyzer\KeyIdentifierAnalyzer())
    ->add(new KeyAnalyzer\NoneAnalyzer())
    ->add(new KeyAnalyzer\OctAnalyzer())
    ->add(new KeyAnalyzer\RsaAnalyzer())
;

$application = new Application('Jose', '@package_version@');
$application->add(new Console\OctKeyGeneratorCommand($jsonConverter));
$application->add(new Console\RsaKeyGeneratorCommand($jsonConverter));
$application->add(new Console\EcKeyGeneratorCommand($jsonConverter));
$application->add(new Console\OkpKeyGeneratorCommand($jsonConverter));
$application->add(new Console\KeyFileLoaderCommand($jsonConverter));
$application->add(new Console\P12CertificateLoaderCommand($jsonConverter));
$application->add(new Console\X509CertificateLoaderCommand($jsonConverter));

$application->add(new Console\EcKeysetGeneratorCommand($jsonConverter));
$application->add(new Console\OkpKeysetGeneratorCommand($jsonConverter));
$application->add(new Console\OctKeysetGeneratorCommand($jsonConverter));
$application->add(new Console\RsaKeysetGeneratorCommand($jsonConverter));
$application->add(new Console\MergeKeysetCommand($jsonConverter));
$application->add(new Console\PublicKeysetCommand($jsonConverter));
$application->add(new Console\RotateKeysetCommand($jsonConverter));
$application->add(new Console\AddKeyIntoKeysetCommand($jsonConverter));

$application->add(new Console\OptimizeRsaKeyCommand($jsonConverter));
$application->add(new Console\KeyAnalyzerCommand($jwkAnalyzerManager, $jsonConverter));
$application->add(new Console\KeysetAnalyzerCommand($jwkAnalyzerManager, $jsonConverter));
$application->add(new Console\X5ULoaderCommand(new X5UFactory($jsonConverter, $httpClient, $messageFactory), $jsonConverter));
$application->add(new Console\JKULoaderCommand(new JKUFactory($jsonConverter, $httpClient, $messageFactory), $jsonConverter));

$application->add(new Console\PemConverterCommand($jsonConverter));

$application->add(new Console\GetThumbprintCommand($jsonConverter));

$application->add(new Console\UpdateCommand());
$application->add(new Console\RollbackCommand());

$application->run();
